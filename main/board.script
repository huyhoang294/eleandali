-- board.script


go.property("timer", 0)     -- Use to time events
local blocksize = 80        -- Distance between block centers
local edge = 85             -- Left and right edge.
local bottom_edge = 100      -- Bottom edge.
local boardwidth = 6        -- Number of columns
local boardheight = 9       -- Number of rows
local centeroff = vmath.vector3(8, -8, 0) -- Center offset for connector gfx since there's shadow below in the block img
local score_per_orbs = 50
local colors = { hash("dark-blue"), hash("red"), hash("blue"), hash("yellow"), hash("green") }
local total_play_time = 10
local energy_none = hash("none")
local energy_low = hash("low")
local energy_high = hash("high")

local function has_energy(orb)
	return orb.type == energy_low or orb.type == energy_high
end

--
-- INIT
--
function init(self)
	self.score = 0
	self.time = total_play_time -- in seconds
	self.board = {}             -- Contains the board structure
	self.blocks = {}            -- List of all blocks. Used for easy filtering on selection.
	self.link = {}             -- Current selection chain
	self.connectors = {}        -- Connector elements to mark the selection chain
	self.dragging = false       -- Drag touch input
	self.state = "stop"
	msg.post(".", "acquire_input_focus")
	msg.post("#", "start_level")
end

local function build_board(self)
	local board = {}
	math.randomseed(os.time())
	local pos = vmath.vector3()
	local x = 0
	local y = 0
	local c -- color
	for x = 0,boardwidth-1 do
		pos.x = edge + blocksize / 2 + blocksize * x
		board[x] = {}
		for y = 0,boardheight-1 do
			pos.y = bottom_edge + blocksize / 2 + blocksize * y
			c = colors[math.random(#colors)]    -- Pick a random color
			local energy_state = energy_none
			local id = factory.create("#blockfactory", pos, null, { color = c })
			board[x][y] = { id = id, color = c,  x = x, y = y, state = energy_state }
		end
	end

	return board
end

--
-- Clear the board
--
local function clear_board(self)
	for y = 0,boardheight - 1 do
		for x = 0,boardwidth - 1 do
			if self.board[x][y] ~= nil then
				go.delete(self.board[x][y].id)
				self.board[x][y] = nil
			end
		end
	end
end

--
-- Apply shift-down logic to all slots on the board, then
-- call the callback.
--
local function collapse_board(board, callback)
	local duration = 0.3
	--
	-- Slide all remaining blocks down into blank (nil) spots.
	-- Going column by column makes this easy.
	--
	-- Avoid some garbage creation by reusing these locals 
	-- through the loops
	--
	local dy = 0
	local pos = vmath.vector3()
	for x = 0,boardwidth - 1 do
		--
		-- Reset the drop down distance for each column
		--
		dy = 0
		for y = 0,boardheight - 1 do
			if board[x][y] ~= nil then
				if dy > 0 then
					--
					-- Move down dy steps
					--
					board[x][y - dy] = board[x][y]
					board[x][y] = nil
					--
					-- Calc new position and animate
					---
					board[x][y - dy].y = board[x][y - dy].y - dy
					go.animate(board[x][y-dy].id, "position.y", go.PLAYBACK_ONCE_FORWARD, bottom_edge + blocksize / 2 + blocksize * (y - dy), go.EASING_OUTBOUNCE, duration)
				end
			else
				--
				-- Empty slot - increase the distance to move
				--
				dy = dy + 1
			end
		end
	end

	go.animate("#", "timer", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, duration, 0, callback)	
end

--
-- Return an iterator function for all non-empty slots
--
local function iterate_orbs(board)
	local x = 0
	local y = -1
	return function()
		repeat
			y = y + 1
			if x == boardwidth - 1 and y == boardheight then
				return nil
			end

			if y == boardheight then
				y = 0
				x = x + 1
			end
		until board[x][y]
		return board[x][y]
	end
end

--
-- Remove a single block from the board
--
local function remove_block(board, block, self)
	if not board[block.x][block.y] then
		-- the block has already been removed
		-- this can happen when we remove a match and a line blast or
		-- other special block effect takes place at the same time
		return
	end
	msg.post(block.id, "remove")
	--
	-- Empty slots are set to nil so we can find them
	--
	board[block.x][block.y] = nil
	
	self.score = self.score + score_per_orbs
	msg.post("#boardui", "set_score", { score = self.score  } )
	--
	-- low energy blast
	--
	if block.type == energy_low then
		for x = block.x - 1, block.x + 1 do
			for y = block.y - 1, block.y + 1 do
				if board[x] and board[x][y] then
					remove_block(board, board[x][y], self)
				end
			end
		end
	--
	-- high energy blast
	--
	elseif block.type == energy_high then
		for x=0, boardwidth -1 do
			if board[x][block.y] then
				remove_block(board, board[x][block.y], self)
			end
		end
		for y=0, boardheight -1 do
			if board[block.x][y] then
				remove_block(board, board[block.x][y], self)
			end
		end
	end
end

--
-- Remove a list of block from the board
--
local function remove_blocks(board, blocks, self)
	for _,block in pairs(blocks) do
		remove_block(board, block, self)
	end
end

--
-- Change type and color of an existing block
-- Use this when converting blocks into other types due
-- to a match of some kind
-- Will clear list of neighbors
--
local function respawn(block, type, color, self)
	self.score = self.score + score_per_orbs
	msg.post("#boardui", "set_score", { score = self.score  } )
	
	block.color = color
	block.type = type
	block.neighbors_vertical = {}
	block.neighbors_horisontal = {}
	msg.post(block.id, "respawn", { color = block.color, type = block.type, position = go.get_position(block.id) })
end

--
-- Remove all block in a link
--
local function remove_link(board, link, callback, self)
	local last = link[#link]
	-- reset the animation on all block in the link
	for _,slot in pairs(link) do
		msg.post(slot.id, "reset")
	end

	-- ignore short links
	if #link < 3 then
		callback()
		return
	-- create special orb of the link is long enough
	elseif #link == 4  and not has_energy(last) then
		local block = table.remove(link)
		respawn(block, energy_low, block.color, self)
	elseif  #link >= 5 and not has_energy(last) then
		local block = table.remove(link)
		respawn(block, energy_high, block.color, self)
	end
	-- remove block and wait before invoking callback
	remove_blocks(board, link, self)
	local duration = 0.3
	go.animate("#", "timer", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, duration, 0, callback)
end


--
-- Add a slot to the link
--
local function add_to_link(self, x, y)
	-- outside board or empty
	if x < 0 or x >= boardwidth or y < 0 or y >= boardheight or self.board[x][y] == nil then
		return
	end

	local slot = self.board[x][y]

	-- add the first slot to the link without any checks
	if #self.link == 0 then
		msg.post(slot.id, "zoom_and_wobble")
		table.insert(self.link, slot)
		return
	end

	local last = self.link[#self.link]
	local previous = self.link[#self.link - 1]
	local distance = math.max(math.abs(last.x - x), math.abs(last.y - y))
	-- don't add the same slot more than once and don't add slots that are too far away
	if distance ~= 1 then
		return
	end
	-- don't add slots of a different color
	if last.color ~= slot.color then
		return
	end
	-- going back to the previous link
	-- remove the last slot of the link
	if previous == slot then
		self.link[#self.link] = nil
		msg.post(last.id, "reset")
		return
	end
	-- don't try to add the same slot twice
	for i=1,#self.link do
		if self.link[i] == slot then
			return
		end
	end	
	-- the new slot is ok, add it
	msg.post(slot.id, "zoom_and_wobble")
	table.insert(self.link, slot)
end

local function countdown(self)
	-- start a repeating timer with a 1 second interval
	timer.delay(1, true, function(self, handle, time_elapsed)
		-- decrease seconds and update label
		self.time = self.time - 1
		msg.post("#boardui", "set_timer", { time = tostring(self.time) } )
		-- cancel timer when countdown reaches 0
		if self.time == 0 then
			timer.cancel(handle)
			msg.post("#", "end_game")
		elseif self.state == "stop" then
			timer.cancel(handle)
		end
	end)
end

-- 
-- Find and return any empty slots.
--
local function empty_slots(board)
	local slots = {}
	for x = 0, boardwidth - 1 do
		for y = 0, boardheight - 1 do
			if board[x][y] == nil then
				--
				-- The slot is nil/empty so we store this position in the
				-- list of slots that we will return
				--
				table.insert(slots, { x = x, y = y })
			end
		end
	end
	return slots
end

--
-- Drop spawned block to the board. Target the supplied slots. 
-- When done, call callback.
--
local function fill_slots(board, empty_slots, callback)
	local duration = 0.3
	--
	-- Go through the list of empty slots and drop a (reused) block
	-- game object into its position.
	--
	local pos = vmath.vector3()	-- Reuse through loop
	-- local number_of_empty_orb = self.time 
	for i, s in pairs(empty_slots) do
		--
		-- Calc the x position of this slot
		--
		pos.x = edge + blocksize / 2 + blocksize * s.x
		--
		-- Start above the screen so we can animate into place
		-- 
		pos.y = 1000
		--
		-- Pick a random block
		--
		local color = colors[math.random(#colors)]
		local type = energy_none
		--
		-- Create a new block game object
		--
		local id = factory.create("#blockfactory", pos, null, { color = color })
		--
		-- Animate into the slot's calculated y position
		--
		go.animate(id, "position.y", go.PLAYBACK_ONCE_FORWARD, bottom_edge + blocksize / 2 + blocksize * s.y, go.EASING_OUTBOUNCE, duration)
		--
		-- Store the new data in the slot (it was nil)
		--
		board[s.x][s.y] = { id = id, type = type, color = color, x = s.x, y = s.y }
	end

	go.animate("#", "timer", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, duration, 0, callback)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("start_level") then
		--
		-- Create a new random board
		--
		self.state = "start"
		self.time = total_play_time
		countdown(self)
		self.board = build_board()
		

	elseif message_id == hash("restart_level") then
		clear_board(self)
		self.board = build_board()
		self.score = 0
		self.time = total_play_time
		self.state = "start"
		msg.post("#boardui", "set_score", { score = self.score } )
		countdown(self)
	elseif message_id == hash("unpause_game") then
		self.state = "start"
		countdown(self)
	elseif message_id == hash("pause_game") then
		self.state = "stop"
	elseif message_id == hash("end_game") then
		msg.post("main:/main#end", "show", { score = self.score } )
		self.state = "stop"
	elseif message_id == hash("post-reaction") then
		--
		-- Collapse any remaining slots
		--
		collapse_board(self.board, function ()
			--
			-- Find empty slots
			--
			local s = empty_slots(self.board)

			--
			-- If there are empty slots, fill them.
			--
			if #s > 0 then
				fill_slots(self.board, s, function ()
					--
					-- After filling
					--
				end)
			end
		end)
	end
end

--
-- INPUT HANDLING
--
function on_input(self, action_id, action)
	if action_id == hash("touch") then
		--
		-- What block was touched?
		--
		local x = math.floor((action.x - edge) / blocksize)
		local y = math.floor((action.y - edge) / blocksize)

		--
		-- Try to add it to the link
		--
		add_to_link(self, x, y)

		-- Start linking
		if action.pressed then
			self.linking = true
			-- Stop linking remove link
		elseif action.released then
			remove_link(self.board, self.link, function()
				self.linking = false
				self.link = {}
				msg.post("#", "post-reaction")
			end, self)
		end
	end
end